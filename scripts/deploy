#!/bin/bash
# Run with `sudo -E ./scripts/deploy` to preserve environment variables
set -e
name=$1

if [ -z "$DIGITALOCEAN_ACCESS_TOKEN" ]; then
  echo "Error: DIGITALOCEAN_ACCESS_TOKEN is not set"
  exit 1
fi

if [ $# -eq 0 ]; then
    hash=$(git rev-parse HEAD)
    shorthash=${hash:0:8}
    timestamp=$(date +%s)
    name="$shorthash-$timestamp"
fi

echo "Setting up virtual environments..."
python3 -m venv .venv
source .venv/bin/activate
pip install -r requirements.txt

pushd client
export NVM_DIR=$HOME/.nvm;
source $NVM_DIR/nvm.sh;
nvm use
popd

echo "Building client..."
pushd client
gulp build --production
popd

echo "Building server..."
pushd server
docker build . -f=prod.Dockerfile --tag=game-galgagame
popd
docker save -o .images/game-galgagame game-galgagame

echo "Provisioning instance..."
docker-machine create --driver=digitalocean --digitalocean-access-token="$DIGITALOCEAN_ACCESS_TOKEN" --digitalocean-region=sfo2 --digitalocean-image=ubuntu-20-04-x64 --digitalocean-tags=ring-of-worlds --engine-install-url "https://releases.rancher.com/install-docker/19.03.9.sh" "$name"
eval "$(docker-machine env "$name")"

echo "Copying image to server..."
docker-machine scp .images/game-galgagame "$name":game-galgagame
docker load -i .images/game-galgagame

echo "Building server..."
# Need to export COMPOSE_TLS_VERSION=TLSv1_2
docker compose -f docker-compose.prod.yml build

echo "Booting compose..."
docker compose -f docker-compose.prod.yml up -d

echo "Notifying users..."
./scripts/systemMessage "ðŸ”” Server restarting for update, you may lose connection ðŸ””" || true

echo "Flipping floating IP..."
./scripts/flip "$name"

echo "Purging other droplets"
./scripts/purgeOtherDroplets "$name"

echo "SUCCESS!"
