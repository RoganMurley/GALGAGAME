#!/bin/bash
# Usage: sudo -E ./scripts/deploy [name]
# If no name is provided, the script auto-generates one using git hash and timestamp.

set -euo pipefail

if [ $# -eq 0 ]; then
    hash=$(git rev-parse HEAD)
    shorthash=${hash:0:8}
    timestamp=$(date +%s)
    name="$shorthash-$timestamp"
else
    name="$1"
fi

for cmd in doctl docker ssh scp git; do
  if ! command -v $cmd &> /dev/null; then
    echo "Missing required command: $cmd"
    exit 1
  fi
done

docker context use default

echo "Building client..."
pushd client
gulp build --production
popd

echo "Building server..."
pushd server
docker buildx build --platform linux/amd64 -f=prod.Dockerfile --tag=game-galgagame  --output type=docker,dest=../.images/game-galgagame .
popd

echo "Provisioning droplet '$name'..."
droplet_info=$(doctl compute droplet create "$name" \
  --region "sfo2" \
  --image "ubuntu-22-04-x64" \
  --size "s-1vcpu-2gb" \
  --ssh-keys "circleci-deploy" \
  --tag-names "ring-of-worlds" \
  --format PublicIPv4 \
  --wait \
  --no-header)

IP=$(echo "$droplet_info" | head -n1 | awk '{print $1}')

if [[ -z "$IP" ]]; then
  echo "Failed to retrieve droplet IP"
  exit 1
else
  echo "Provisioned droplet at $IP"
fi

echo "Waiting for SSH..."
for i in {1..15}; do
  if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 root@$IP "echo SSH ready" &>/dev/null; then
    break
  fi
  echo "Retry $i..."
  sleep 5
done

if [ $i -eq 30 ]; then
  echo "SSH timed out"
  exit 1
fi

ssh root@$IP << 'EOF'
  echo "Installing Docker..."
  apt-get update
  curl -fsSL https://get.docker.com | sh
EOF

echo "Creating Docker context..."
CONTEXT_NAME="do-$name"
docker context create "$CONTEXT_NAME" --docker "host=ssh://root@$IP"
docker context use "$CONTEXT_NAME"

echo "Loading Docker image on server..."
scp .images/game-galgagame root@$IP:/home/game-galgagame
ssh root@$IP 'docker load -i /home/game-galgagame'

echo "Running docker compose"
docker compose -f docker-compose.prod.yml build
docker compose -f docker-compose.prod.yml up -d

echo "Notifying users..."
./scripts/systemMessage "ðŸ”” Server restarting for update, you may lose connection ðŸ””" || true

echo "Flipping floating IP..."
./scripts/flip $name

echo "Purging other droplets"
./scripts/purgeOtherDroplets $name

echo "SUCCESS!"
